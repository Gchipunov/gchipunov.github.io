// water.fs
precision mediump float;

uniform sampler2D u_reflectionTexture;
uniform sampler2D u_refractionTexture;
uniform vec3 u_cameraPosition;
uniform vec3 u_lightDirection;

varying vec3 v_worldPosition;
varying vec3 v_normal;
varying vec2 v_texCoord; // Assuming this is screen-space projection for reflection/refraction

void main() {
    vec3 viewDirection = normalize(u_cameraPosition - v_worldPosition);
    vec3 normal = normalize(v_normal);

    // Fresnel effect
    float fresnel = pow(1.0 - max(0.0, dot(viewDirection, normal)), 3.0);
    
    // Reflection color
    vec3 reflectionColor = texture2D(u_reflectionTexture, v_texCoord).rgb;
    
    // Refraction color
    vec3 refractionColor = texture2D(u_refractionTexture, v_texCoord).rgb;
    
    // Combine using fresnel
    vec3 surfaceColor = mix(refractionColor, reflectionColor, fresnel);
    
    // Add some specular lighting
    vec3 reflectDir = reflect(-u_lightDirection, normal);
    float spec = pow(max(dot(viewDirection, reflectDir), 0.0), 32.0);
    vec3 specular = vec3(1.0) * spec;

    gl_FragColor = vec4(surfaceColor + specular, 1.0);
}
